{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/CounterButton.js","Components/Header.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundries.js","actions.js","API/Api.js","constants.js","Containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","username","className","src","alt","CardList","robots","map","user","index","key","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","console","log","color","props","onClick","PureComponent","Header","Component","Searchbox","searchChange","type","aria-label","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundries","hasError","error","info","requestRobots","dispatch","url","fetch","then","response","json","data","payload","catch","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.654dba83.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst Card = ({id, name, email, username }) =>{\r\n    //other cleaner way to desturcture the props is above \r\n    //const {id, image, name, email, username } = props;\r\n    return(\r\n     \r\n         <div className=\"inline-block px-2 overflow-auto bg-green-300 max-w-xs rounded shadow-lg m-8 cursor-pointer transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110\">\r\n          <img className=\"w-full\" src={`https://robohash.org/${id}?200x200`} alt='Robots' />\r\n          <div className=\"px-6 py-4\">\r\n            <div className=\"font-bold text-xl mb-2 text-center\">{name}</div>\r\n            <p className=\"text-gray-700 text-base\">\r\n              {email}\r\n            </p>\r\n            <p className=\"text-gray-700 text-base font-bold my-2\">\r\n              Username: {username}\r\n            </p>\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    return (\r\n        <div className=\"main-container\">\r\n            {\r\n                robots.map((user, index)=>{\r\n                    return (\r\n                        <Card key={index} id={robots[index].id}  name={robots[index].name}  email={robots[index].email} username = {robots[index].username} />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React, { PureComponent } from 'react';\r\n\r\nclass CounterButton extends PureComponent {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      count: 0\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  updateCount = () => {\r\n    this.setState(state => {\r\n      return {count: state.count + 1}\r\n    })\r\n  }\r\n\r\n  render() {\r\n    console.log('CounterButton')\r\n    return (\r\n      <button color={this.props.color} onClick={this.updateCount} className=\"bg-blue-500 hover:bg-blue-400 text-white my-6 font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\">\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton'\r\n\r\nclass Header extends Component {\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return false;\r\n    // }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                 <h1 className=\"text-5xl m-6 uppercase cursor-pointer transition duration-500 ease-in-out transform hover:skew-y-3\">Robo Friends</h1>\r\n                 <CounterButton />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return (\r\n        <input className=\"bg-white focus:outline-none my-2 focus:shadow-outline border border-green-300 rounded-lg py-2 px-4 sm:w-full  xl:w-3/4 appearance-none leading-normal\" \r\n                type=\"search\"\r\n                aria-label=\"Search robots\" \r\n                placeholder=\"Search for robots\" \r\n                onChange = {searchChange}\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return(\r\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: 'auto'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundries extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError : true})\r\n    }\r\n\r\n    render (){\r\n\r\n        if(this.state.hasError){\r\n            return <h1> Opps... Something does'nt look good!!!</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundries;","import { apiCall } from './API/Api'\r\n\r\nimport {\r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) =>({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload : text\r\n})\r\n\r\nexport const requestRobots= () => (dispatch) =>{\r\n    const usersUrl = 'https://jsonplaceholder.typicode.com/users';\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    })\r\n    apiCall(usersUrl)\r\n        .then(data => dispatch(\r\n                {type: REQUEST_ROBOTS_SUCCESS, payload: data })\r\n            )\r\n        .catch( error => dispatch ({type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\n","export const apiCall = (url) => fetch(url).then(response => response.json())\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//Thunk request state constatnts.\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../Components/CardList';\r\n\r\nimport Header from '../Components/Header';\r\n\r\nimport SearchBox from  '../Components/Searchbox';\r\n\r\nimport Scroll from '../Components/Scroll';\r\n\r\nimport ErrorBoundries from '../Components/ErrorBoundries'\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n       searchField:  state.searchRobots.searchField,\r\n       robots: state.requestRobots.robots,\r\n       isPending: state.requestRobots.isPending,\r\n       error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots : () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n    render() {\r\n\r\n        const { robots, searchField, onSearchChange, isPending } = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        return (\r\n                <div>\r\n                    <Header />\r\n                    <SearchBox searchChange= { onSearchChange } />\r\n                    <Scroll>\r\n                        {          \r\n                            isPending ? \r\n                                <h1 className=\"text-5xl m-6 uppercase\">loading</h1> :             \r\n                                    <ErrorBoundries>\r\n                                        <CardList robots = {filteredRobots}/>\r\n                                    </ErrorBoundries>\r\n                        }\r\n\r\n                    </Scroll>\r\n                  \r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField : '',\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending : true,\r\n    robots : []\r\n}\r\n\r\n\r\n//searchField Reducer: this will preserve the initial state of the app whilst creating new obj without mutating the initial state.\r\n\r\nexport const searchRobots = ( state=initialStateSearch, action={}) =>{\r\n    //console.log(action.type)\r\n\r\n    switch( action.type){\r\n        case  CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField : action.payload })\r\n            //return { ...state, searchField: action.payload };\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={})=>{\r\n\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending : true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots : action.payload, isPending : false});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleware from 'redux-thunk';\r\n//import devToolsEnhancer from 'remote-redux-devtools';\r\n\r\nimport './index.css';\r\nimport './tailwind.generated.css';\r\nimport App from './Containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots} from './reducers';\r\n\r\n\r\nconst logger = createLogger();\r\n\r\n// if there is more than one reducer then we need to pass all  reducer to the combined reducer then use that into the store\r\nconst rootReducer = combineReducers( { searchRobots, requestRobots })\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store = {store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}