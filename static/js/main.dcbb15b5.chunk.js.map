{"version":3,"sources":["Components/Card.js","Components/CardComponents.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundries.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","image","email","username","alt","className","src","CardComponents","robots","allCards","map","user","index","key","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundries","state","hasError","error","info","this","setState","Component","App","onSearchchange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0OAqBeA,EAnBF,SAAC,GAA6C,IAA5CC,EAA2C,EAA3CA,GAAWC,GAAgC,EAAvCC,MAAuC,EAAhCD,MAAME,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,IAG7C,OACK,yBAAKC,UAAU,8KACd,yBAAKA,UAAU,SAASC,IAAG,+BAA0BP,EAA1B,YAAwCK,IAAMA,IACzE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,sCAAsCL,GACrD,uBAAGK,UAAU,2BACVH,GAEH,uBAAGG,UAAU,0CAAb,aACaF,MCEVI,EAZQ,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAEfC,EAAWD,EAAOE,KAAI,SAACC,EAAMC,GAC/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAOb,GAAIS,EAAOI,GAAOb,GAAKC,KAAMQ,EAAOI,GAAOZ,KAAOE,MAAOM,EAAOI,GAAOV,MAAOC,SAAYK,EAAOI,GAAOT,cAErI,OACI,yBAAKE,UAAU,kBACTI,ICECK,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,2BAAOV,UAAU,qIACTW,KAAK,SACLC,YAAY,oBACZC,SAAYH,KCMbI,EAVA,SAACC,GAEZ,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAChEJ,EAAMK,WCqBJC,E,kDAxBX,WAAYN,GAAO,IAAD,8BACd,gBAEKO,MAAQ,CACTC,UAAW,GAJD,E,8DAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAK3B,OAAGG,KAAKJ,MAAMC,SACH,uEAGJG,KAAKX,MAAMK,a,GAnBGQ,aCSRC,E,kDACjB,aAAc,IAAD,8BACT,gBAkBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAlB1C,EAAKZ,MAAQ,CACTnB,OAAS,GACT6B,YAAc,IAJT,E,gEAQO,IAAD,OAEfG,MADY,8CAEPC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAM,SAAAG,GACH,EAAKZ,SAAU,CAAExB,OAASoC,S,+BAO5B,IAAD,EAE2Bb,KAAKJ,MAA7BnB,EAFH,EAEGA,OAAQ6B,EAFX,EAEWA,YAEVQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASZ,EAAYW,kBAkBzD,OAAQxC,EAAO0C,OAEP,6BACI,wBAAI7C,UAAU,sGAAd,gBACA,kBAAC,EAAD,CAAWU,aAAegB,KAAKI,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAgB3B,OAAUqC,OAPrB,kD,GA9CAZ,aCAbkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACG,kBAAC,EAAD,OAELC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.dcbb15b5.chunk.js","sourcesContent":["import React  from 'react';\r\n\r\nconst Card = ({id, image, name, email, username, alt }) =>{\r\n    //other cleaner way to desturcture the props is above \r\n    //const {id, image, name, email, username } = props;\r\n    return(\r\n         <div className=\"inline-block overflow-hidden bg-green-300 max-w-xs rounded shadow-lg m-8 cursor-pointer transition duration-500 ease-in-out transform hover:-translate-y-1 hover:scale-110\">\r\n          <img className=\"w-full\" src={`https://robohash.org/${id}?200x200`} alt={ alt } />\r\n          <div className=\"px-6 py-4\">\r\n            <div className=\"font-bold text-xl mb-2 text-center\">{name}</div>\r\n            <p className=\"text-gray-700 text-base\">\r\n              {email}\r\n            </p>\r\n            <p className=\"text-gray-700 text-base font-bold my-2\">\r\n              Username: {username}\r\n            </p>\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardComponents = ({robots}) =>{\r\n\r\n    const allCards = robots.map((user, index) =>{\r\n        return <Card key={index} id={robots[index].id}  name={robots[index].name}  email={robots[index].email} username = {robots[index].username} /> \r\n    })\r\n    return(\r\n        <div className=\"main-container\">\r\n            { allCards }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardComponents;","import React from 'react'\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return (\r\n        <input className=\"bg-white focus:outline-none focus:shadow-outline border border-green-300 rounded-lg py-2 px-4 w-1/4 appearance-none leading-normal\" \r\n                type=\"search\" \r\n                placeholder=\"Search for robots\" \r\n                onChange = {searchChange}\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return(\r\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: 'auto'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundries extends Component {\r\n    constructor(props){\r\n        super()\r\n\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({ hasError : true})\r\n    }\r\n\r\n    render (){\r\n\r\n        if(this.state.hasError){\r\n            return <h1> Opps... Something does'nt look good!!!</h1>\r\n        }\r\n\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundries;","import React, { Component } from 'react';\r\n\r\nimport CardComponents from '../Components/CardComponents'\r\n\r\nimport SearchBox from  '../Components/Searchbox';\r\n\r\nimport Scroll from '../Components/Scroll';\r\n\r\nimport ErrorBoundries from '../Components/ErrorBoundries'\r\n\r\n\r\n\r\nexport default class App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchField : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const url = 'https://jsonplaceholder.typicode.com/users'\r\n        fetch(url)\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then( users => {\r\n                this.setState ({ robots : users})\r\n            })\r\n       \r\n    }\r\n    onSearchchange = (event) =>{\r\n        this.setState({ searchField: event.target.value})\r\n    }\r\n    render() {\r\n\r\n        const { robots, searchField } = this.state\r\n\r\n        const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n\r\n        // if(!robots.length){\r\n        //     return <h1>Loading ......</h1> \r\n        // }else{\r\n        //     return (\r\n        //         <div>\r\n        //             <h1 className=\"text-5xl m-6 uppercase cursor-pointer transition duration-500 ease-in-out transform hover:skew-y-3\">Robo Friends</h1>\r\n        //             <SearchBox searchChange= {this.onSearchchange} />\r\n        //             <Scroll>\r\n        //                 <CardComponents robots = {filteredRobots}/>\r\n        //             </Scroll>\r\n                  \r\n        //         </div>\r\n        //     )\r\n        // }\r\n\r\n        return !robots.length ?  <h1>Loading ......</h1> \r\n            : (\r\n                <div>\r\n                    <h1 className=\"text-5xl m-6 uppercase cursor-pointer transition duration-500 ease-in-out transform hover:skew-y-3\">Robo Friends</h1>\r\n                    <SearchBox searchChange= {this.onSearchchange} />\r\n                    <Scroll>\r\n                        <ErrorBoundries>\r\n                            <CardComponents robots = {filteredRobots}/>\r\n                        </ErrorBoundries>\r\n                    </Scroll>\r\n                  \r\n                </div>\r\n            )\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './tailwind.generated.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n       <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}